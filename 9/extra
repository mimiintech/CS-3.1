global getParams
getParams:

	;-----
	; push maintained registers (rbx, r12, r13, r14, r15)
	push	rbp
	mov	rbp, rsp
	push rbx
	push r12
	push r14

	;----------
	; Check that the correct amount of arguements have been entered

		; Usage Reminder (Err1)
		cmp rdi, 1
		je Err1

		; Correct Argument Number (Err2)
		cmp rdi, 7
		jne Err2

	; move ARGV into r12
	mov r12, rsi

	; move speed addr into r13
	mov r14, rdx

	;----------
	; Check for correct argument input

		;-----
		; Check first argument == '-sp' (Err3)

			; get address of ARGV[1]
			mov rbx, qword[r12 + 8] 	; +8 because ARGV is an array of addresses. addresses are always quad sized

			; if (ARGV[1] != '-sp') then Err3
			cmp dword[rbx], 0x0070732d 	; compare the first 4 bytes to the expected input (in HEX and backwards).
			jne Err3

		;-----
		; Check speed value specified is correct (Err4)

			; get address of ARGV[2] (speed value)
			mov rbx, qword[r12 + 16] ; +16 for ARGV[2] (2[position in array] * 8[quad size])

			; loop over each character to verify it's within range
			RangeCkLp:

				mov al, byte [rbx]

				; chr within range? '0' - '8' (Err4)
				cmp al, '0'
				jb Err4
				cmp al, '8'
				ja Err4

			; loop RangeCkLp
			inc rbx
			cmp byte[rbx], NULL
			jne RangeCkLp

			;-----
			; convert ASCII nonary to integer (base 10)

			; get addr of ARGV[2] again
			mov rbx, qword[r12 + 16] ; +16 for ARGV[2] (2[position in array] * 8[quad size])

			; call nonary2int macro
			nonary2int rbx, r14

			; check if value is within range
			cmp dword [r14], SPD_MIN
			jb Err4
			cmp dword [r14], SPD_MAX
			ja Err4

		;-----
		; Check second argument == '-cl' (Err5)

			; get address of ARGV[3]
			mov rbx, qword[r12 + 24]

			; if (ARGV[3] != '-cl') then Err5
			cmp dword [rbx], 0x006c632d 	; compare the first 4 bytes to the expected input (in HEX and backwards).
			jne Err5

		;-----
		; Check color value specified is correct (Err6)

			; get address of ARGV[4] (color value)
			mov rbx, qword[r12 + 32] ; +32 for ARGV[4] (4[position in array] * 8[quad size])

			; loop over each character to verify it's within range
			RangeCkLp2:

				mov al, byte [rbx]

				; chr within range? '0' - '8' (Err6)
				cmp al, '0'
				jb Err6
				cmp al, '8'
				ja Err6

			; loop RangeCkLp
			inc rbx
			cmp byte[rbx], NULL
			jne RangeCkLp2

			;-----
			; convert ASCII nonary to integer (base 10)

			; get addr of ARGV[4] again
			mov rbx, qword[r12 + 32] ; +32 for ARGV[4] (4[position in array] * 8[quad size])

			; call nonary2int macro
			push qword [r14]
			nonary2int rbx, rcx
			pop qword [r14]

			; check if value is within range
			cmp dword [rcx], CLR_MIN
			jb Err6
			cmp dword [rcx], CLR_MAX
			ja Err6

		;-----
		; Check third argument == '-sz' (Err7)

			; get address of ARGV[5]
			mov rbx, qword[r12 + 40]

			; if (ARGV[5] != '-sz') then Err7
			cmp dword[rbx], 0x007a732d 	; compare the first 4 bytes to the expected input (in HEX and backwards).
			jne Err7

		;-----
		; Check size value specified is correct (Err8)

			; get address of ARGV[6] (size value)
			mov rbx, qword[r12 + 48] ; +48 for ARGV[6] (6[position in array] * 8[quad size])

			; loop over each character to verify it's within range
			RangeCkLp3:

				mov al, byte [rbx]

				; chr within range? '0' - '8' (Err8)
				cmp al, '0'
				jb Err8
				cmp al, '8'
				ja Err8

			; loop RangeCkLp
			inc rbx
			cmp byte[rbx], NULL
			jne RangeCkLp3

			;-----
			; convert ASCII nonary to integer (base 10)

			; get addr of ARGV[6] again
			mov rbx, qword[r12 + 48] ; +48 for ARGV[6] (6[position in array] * 8[quad size])

			; call nonary2int macro
			push qword [r14]
			nonary2int rbx, r8
			pop qword [r14]

			; check if value is within range
			cmp dword [r8], SIZ_MIN
			jb Err8
			cmp dword [r8], SIZ_MAX
			ja Err8


	; No Errors Found.
	jmp NoErrs

	;-------------------------------------------
	; ----- Errors List

	; Error 1
	; errUsage		"Usage: ./wheels -sp <nonaryNumber> -cl <nonaryNumber> ..."
	Err1:

		; print error
		mov rdi, errUsage ; set argument for passing (error3)
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp
		ret

	; Error 2
	; errBadCL		"Error, invalid or incomplete command line argument."
	Err2:

		; print error
		mov rdi, errBadCL ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 3
	; errSpdSpec	"Error, speed specifier incorrect."
	Err3:

		; print error
		mov rdi, errSpdSpec ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 4
	; errSpdValue	"Error, speed value must be between 1 and 55(9)."
	Err4:

		; print error
		mov rdi, errSpdValue ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 5
	; errClrSpec	"Error, color specifier incorrect."
	Err5:

		; print error
		mov rdi, errClrSpec ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 6
	; errClrValue	"Error, color value must be between 0 and 34511010(9)."
	Err6:

		; print error
		mov rdi, errClrValue ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 7
	; errSizSpec	"Error, size specifier incorrect."
	Err7:

		; print error
		mov rdi, errSizSpec ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

	; Error 8
	; errSizValue	"Error, size value must be between 121(9) and 2662(9)."
	Err8:

		; print error
		mov rdi, errSizValue ; set argument for passing
		call printString
		
		; return FALSE to main
		mov rax, FALSE

		; maintain std call conv
		pop r14
		pop r12
		pop rbx
		pop rbp

		ret

;-----
; No Errors Detected, return TRUE to main
NoErrs:

; maintain std call conv
pop r14
pop r12
pop rbx
pop rbp

mov rax, TRUE

ret





	;push qword [r13]
	aNonary2int rbx, r14
	;pop qword [r13]

